import utils

# Programa Principal

# 1)
"""
Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero.
Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario.

"""
print("\n************************************")
print("         ACTIVIDAD N¬∫ 1")
print("************************************\n")


# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa un N√∫mero Entero: ", 1)

# Llama a la Funci√≥n para Mostrar los Factoriales hasta el n√∫mero ingresado
utils.mostrar_factoriales(nro)


# 2)
"""
Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

"""
print("\n************************************")
print("         ACTIVIDAD N¬∫ 2")
print("************************************\n")

# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa un N√∫mero Entero: ", 1)

# Llama a la Funci√≥n para Mostrar los Fibonacci hasta el n√∫mero ingresado
utils.mostrar_fibonacci(nro)



# 3)
"""
Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
utilizando la f√≥rmula n**ùëö = n * n**(m-1).
Prueba esta funci√≥n en un algoritmo general

"""

print("\n************************************")
print("         ACTIVIDAD N¬∫ 3")
print("************************************\n")


# Llama a Funci√≥n para Pedir un Nro
base = utils.leer_decimal_validado("Ingresa un N√∫mero: ")
potencia = utils.leer_entero_validado("Ingresa el Exponente al que desea elevar el N√∫mero anterior: ", 0)

# Llama a Funci√≥n para Mostrar el Resultado
utils.mostrar_potencia(base, potencia)




# 4)
"""
Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal
y devuelva su representaci√≥n en binario como una cadena de texto.

Convertir el n√∫mero 10 a binario: 
10 √∑ 2 = 5     resto: 0   
 5 √∑ 2 = 2     resto: 1   
 2 √∑ 2 = 1     resto: 0   
 1 √∑ 2 = 0     resto: 1   
Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010". 

"""
print("\n************************************")
print("         ACTIVIDAD N¬∫ 4")
print("************************************\n")

# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa un N√∫mero Entero: ", 1)

utils.mostrar_decimal_a_binario(nro)



# 5)
"""
Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes,
y devuelva True si es un pal√≠ndromo o False si no lo es. 

     Requisitos: 
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()

"""
print("\n************************************")
print("         ACTIVIDAD N¬∫ 5")
print("************************************\n")

# Llama a la Funci√≥n para ingresar una cadena
cadena = utils.es_cadena_sin_espacios_ni_tildes("Ingresa una cadena sin Espacios ni Tildes: ")

# Muestra si es Verdadero o Falso
print(f"La cadena {cadena} es Pal√≠ndromo? {utils.es_palindromo(cadena)}")



# 6)
"""
Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba
un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

     Restricciones: 

- No se puede convertir el n√∫mero a string.
- Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 

Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)

"""

print("\n************************************")
print("         ACTIVIDAD N¬∫ 6")
print("************************************\n")

# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa un N√∫mero Entero Positivo: ", 1)

# Llama a la Funci√≥n para Sumar los d√≠gitos del N√∫mero
print(f"La suma de los digitos del N√∫mero {nro} es igual a {utils.suma_digitos(nro)}")


# 7)
"""
Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques,
en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. 
 
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide. 
 
      Ejemplos: 

contar_bloques(1)   ‚Üí 1         (1) 
contar_bloques(2)   ‚Üí 3         (2 + 1) 
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1) 

"""

print("\n************************************")
print("         ACTIVIDAD N¬∫ 7")
print("************************************\n")


# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa el N√∫mero de Bloques que se colocar√°n en el Nivel m√°s Bajo de la Pir√°mide: ", 1)

# Muestra la Pir√°mide seg√∫n N√∫mero indicado por usuario
utils.mostrar_piramide(nro)

# Llama a la Funci√≥n para Contar los Bloques que Necesita
print(f"\nSi la Base de la Pir√°mide tiene {nro} bloques entonces se necesitar√°n en Total {utils.contar_bloques(nro)} bloques para Construir la Pir√°mide completa")


# 8)
"""
Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba
un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

      Ejemplos: 

contar_digito(12233421, 2)   ‚Üí 3   
contar_digito(5555, 5)       ‚Üí 4   
contar_digito(123456, 7)     ‚Üí 0   


"""

print("\n************************************")
print("         ACTIVIDAD N¬∫ 8")
print("************************************\n")

# Llama a Funci√≥n para Pedir un Nro
nro = utils.leer_entero_validado("Ingresa un N√∫mero Entero Positivo: ", 1)
digito = utils.leer_digito_validado("Ingresa un D√≠gito entre 0 y 9: ")

print(f"\nEl D√≠gito {digito} est√° inclu√≠do {utils.contar_digito(nro, digito)} veces dentro del n√∫mero {nro}")